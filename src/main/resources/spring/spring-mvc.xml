<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
			http://www.springframework.org/schema/mvc 
			http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-3.2.xsd ">
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.gihub.sample.shiro.web.controller" />

	<!-- 注解驱动 -->
	<mvc:annotation-driven />

	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>


	<!-- 资源管理 -->
	<!-- servlet在找页面时，走的是dispatcherServlet路线。找不到的时候会报404 加上这个默认的servlet时候，servlet在找不到的时候会去找静态的内容。 -->
	<mvc:default-servlet-handler />
	<!-- js放在view下面加载配置 -->
	<mvc:resources location="/WEB-INF/" mapping="/**/common/**" />
	<mvc:resources location="/WEB-INF/" mapping="/**/js/**" />

	<!-- 内部资源视图解析器 -->
	<bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 将根路径/路由到demo/index处理 -->
	<mvc:view-controller path="/" view-name="redirect:/demo/index" />

	<!-- 控制器异常处理 -->
	<bean id="exceptionResolver" class="com.gihub.sample.shiro.web.exception.ExceptionHandler"></bean>

	<bean id="localResolver" class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver">
	</bean>

	<!-- shiro注解支持 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>

</beans>